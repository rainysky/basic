<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration >
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。-->
<!-- 当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	
	<!-- 用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。-->
	<!-- 通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --> 
 	<property name="APP_Name" value="basic" />  
 
	<!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。 -->
	<!-- 但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
 	<contextName>${APP_Name}</contextName>  
 
 	<!-- 两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）-->
 	<!-- 转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。 -->
 	<!--  例如将解析配置文件的时间作为上下文名称： -->
 	<!-- <contextName>${bySecond}</contextName>   -->
 	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/> 
 
 	<!-- 每天生成一个日志文件，保存30天的日志文件。 -->
	<appender name="DAY_FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
	      <fileNamePattern>d:/log/${APP_Name}-info.%d{yyyy-MM-dd}.log</fileNamePattern> 
	      <maxHistory>30</maxHistory>  
	    </rollingPolicy> 
	    <encoder> 
	      <pattern>%date %level [%thread] %logger.%class{0}#%method [%file:%line] %msg%n</pattern> 
	    </encoder> 
	 </appender>  
	 
 	<!-- 每天生成一个错误日志文件，保存30天的日志文件。 -->
	<appender name="DAY_FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
	      <fileNamePattern>d:/log/${APP_Name}-error.%d{yyyy-MM-dd}.log</fileNamePattern> 
	      <maxHistory>30</maxHistory>  
	    </rollingPolicy> 
	    <encoder> 
	      <pattern>%date %level [%thread] %logger.%class{0}#%method [%file:%line] %msg%n</pattern> 
	    </encoder> 
	 </appender>  
  
	
	<!-- 控制台输出 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%date %level [%thread] %logger.%class{0}#%method [%file:%line] %msg%n</pattern>
		</encoder>
	</appender>
	
	<root level="ERROR">
		<appender-ref ref="STDOUT" />
	</root>
	
	<!-- 控制com包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级<root>的日志级别“info”；-->
    <!-- 没有设置additivity，默认为true，将此loger的打印信息向上级传递； -->
	 <!-- logback为myApp中的包 -->   
	<logger name="com.rainy.mini.test" level="DEBUG" additivity="false">
		<appender-ref ref="DAY_FILE_INFO" />
		<appender-ref ref="STDOUT" />
	</logger>
	
	<logger name="com.rainy.mini" level="error" additivity="false">
		<appender-ref ref="DAY_FILE_ERROR" />
		<appender-ref ref="STDOUT" />
	</logger>
	
	<!-- 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF 默认是DEBUG -->
	 <!-- name为myApp中的包 -->   
	<logger name="com.rainy.mini.core.systeminit" level="DEBUG" additivity="false">
		<appender-ref ref="DAY_FILE_INFO" />
		<appender-ref ref="STDOUT" />
	</logger>
</configuration>